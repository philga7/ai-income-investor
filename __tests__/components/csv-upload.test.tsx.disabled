import { render, screen, fireEvent } from '@testing-library/react';
import { CSVUpload } from '@/components/portfolios/csv-upload';

// Mock the toast
jest.mock('sonner', () => ({
  toast: {
    error: jest.fn(),
    success: jest.fn(),
    warning: jest.fn(),
  },
}));

// Mock Papa Parse
jest.mock('papaparse', () => ({
  parse: jest.fn(),
}));

// Mock URL.createObjectURL and related DOM operations
const mockCreateObjectURL = jest.fn().mockReturnValue('blob:mock-url');
const mockRevokeObjectURL = jest.fn();
const mockClick = jest.fn();
const mockAppendChild = jest.fn();
const mockRemoveChild = jest.fn();

describe('CSVUpload', () => {
  const mockOnLotsParsed = jest.fn();
  const mockOnCancel = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock global DOM operations
    global.URL.createObjectURL = mockCreateObjectURL;
    global.URL.revokeObjectURL = mockRevokeObjectURL;
    
    const mockAnchor = {
      href: '',
      download: '',
      click: mockClick,
      style: { display: 'none' },
    };
    
    jest.spyOn(document, 'createElement').mockReturnValue(mockAnchor as any);
    jest.spyOn(document.body, 'appendChild').mockImplementation(mockAppendChild);
    jest.spyOn(document.body, 'removeChild').mockImplementation(mockRemoveChild);
  });

  it('renders upload interface', () => {
    render(<CSVUpload onLotsParsed={mockOnLotsParsed} onCancel={mockOnCancel} />);
    
    expect(screen.getByText('Upload CSV File')).toBeInTheDocument();
    expect(screen.getByText('Download Template')).toBeInTheDocument();
    expect(screen.getByText(/Drag and drop a CSV file here/)).toBeInTheDocument();
    expect(screen.getByText(/Expected columns: open_date, quantity, price_per_share, notes/)).toBeInTheDocument();
  });

  it('downloads template when download button is clicked', () => {
    render(<CSVUpload onLotsParsed={mockOnLotsParsed} onCancel={mockOnCancel} />);
    
    fireEvent.click(screen.getByText('Download Template'));
    
    expect(mockCreateObjectURL).toHaveBeenCalled();
    expect(mockClick).toHaveBeenCalled();
    expect(mockAppendChild).toHaveBeenCalled();
    expect(mockRemoveChild).toHaveBeenCalled();
    expect(mockRevokeObjectURL).toHaveBeenCalled();
  });

  it('handles file input change', () => {
    render(<CSVUpload onLotsParsed={mockOnLotsParsed} onCancel={mockOnCancel} />);
    
    const browseButton = screen.getByRole('button', { name: /browse/i });
    expect(browseButton).toBeInTheDocument();
  });

  it('shows processing state when file is being processed', () => {
    render(<CSVUpload onLotsParsed={mockOnLotsParsed} onCancel={mockOnCancel} />);
    
    // Initially, processing state should not be visible
    expect(screen.queryByText('Processing CSV file...')).not.toBeInTheDocument();
  });

  it('shows cancel button only after CSV is parsed', () => {
    render(<CSVUpload onLotsParsed={mockOnLotsParsed} onCancel={mockOnCancel} />);
    
    // Initially, cancel button should not be visible
    expect(screen.queryByText('Cancel')).not.toBeInTheDocument();
  });

  it('handles drag and drop events', () => {
    render(<CSVUpload onLotsParsed={mockOnLotsParsed} onCancel={mockOnCancel} />);
    
    const dropZone = screen.getByText(/Drag and drop a CSV file here/).closest('div');
    expect(dropZone).toBeInTheDocument();
    
    // Test drag over
    fireEvent.dragOver(dropZone!);
    // Test drag leave
    fireEvent.dragLeave(dropZone!);
  });
}); 